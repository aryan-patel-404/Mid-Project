[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Googled Pies",
    "section": "",
    "text": "For this case Let’s Consider the below data Visualization of “Which pies Americans googled for in the last five years, in selected states ?”\nSource : https://app.datawrapper.de/river/_/W0q4C\nFrom the above Picture, the Pie charts displaying popular pie tastes from several US states as well as Washington, D.C. are displayed in the image. The majority of regions are dominated by apple pie, with Massachusetts (52%), New York (49%), and California (41%), at the top. The second most popular dessert is pumpkin pie, particularly in Texas (37%) and Hawaii (37%). Cherry, key lime, and pecan pies all have lower market shares; pecan pie is particularly well-liked in southern states like Texas (26%) and Mississippi (16%). Florida is the state that loves key lime pie the most (22%), whereas Wisconsin is the state that loves cherry pie the least (14%). Regional differences in flavor notwithstanding, apple pie continues to be the nation’s favorite pie overall.\nBy this we can produce better graphics or redesigning of the above data in dot plot and scatter plot.\nLoading Libraries\nlibrary(lattice)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\nEnter the data:\nMassachusetts &lt;- c(52,25,10,7,6)\nNewYork &lt;- c(49,27,10,7,7)\nDC &lt;- c(45,28,12,8,7)\nWisconsin &lt;- c(43,28,10,5,14)\nCalifornia &lt;- c(41,33,11,6,9)\nHawaii &lt;- c(39,37,10,7,7)\nColarado &lt;- c(34,36,13,6,11)\nFlorida &lt;- c(33,25,13,22,7)\nTexas &lt;- c(32,25,26,7,10)\nMississippi &lt;- c(32,16,37,7,8)\n\nmat &lt;- cbind(Massachusetts,NewYork,DC,Wisconsin,California,Hawaii,Colarado,Florida,Texas,Mississippi)\nmat\n\n     Massachusetts NewYork DC Wisconsin California Hawaii Colarado Florida\n[1,]            52      49 45        43         41     39       34      33\n[2,]            25      27 28        28         33     37       36      25\n[3,]            10      10 12        10         11     10       13      13\n[4,]             7       7  8         5          6      7        6      22\n[5,]             6       7  7        14          9      7       11       7\n     Texas Mississippi\n[1,]    32          32\n[2,]    25          16\n[3,]    26          37\n[4,]     7           7\n[5,]    10           8\nAdd row and coloumn labels:\ntype &lt;- c(\"Apple Pie\", \"Pumpkin Pie\", \"Pecan Pie\", \"Key Lime Pie\", \"Cherry Pie\")\nCity &lt;- c(\"Massachusetts\", \"NewYork\",\"DC\",\"Wisconsin\",\"California\",\"Hawaii\",\"Colarado\",\"Florida\",\"Texas\",\"Mississippi\")\n\n\ncolnames(mat) &lt;- City\nrownames(mat) &lt;- type \nmat\n\n             Massachusetts NewYork DC Wisconsin California Hawaii Colarado\nApple Pie               52      49 45        43         41     39       34\nPumpkin Pie             25      27 28        28         33     37       36\nPecan Pie               10      10 12        10         11     10       13\nKey Lime Pie             7       7  8         5          6      7        6\nCherry Pie               6       7  7        14          9      7       11\n             Florida Texas Mississippi\nApple Pie         33    32          32\nPumpkin Pie       25    25          16\nPecan Pie         13    26          37\nKey Lime Pie      22     7           7\nCherry Pie         7    10           8\nIt is now in matrix form where Coloumns are City Names and Rows are Type of Pies."
  },
  {
    "objectID": "about.html#comapring-the-dot-plot-to-pie-charts",
    "href": "about.html#comapring-the-dot-plot-to-pie-charts",
    "title": "Googled Pies",
    "section": "Comapring the Dot plot to Pie Charts",
    "text": "Comapring the Dot plot to Pie Charts\nIn comparison to the pie chart, the second chart—a dot plot—provides a more accurate and thorough means of visualizing search interest in pies. Although the pie chart’s proportionate slices provide a basic picture of the most popular pies, it is unable to display precise values, which makes it challenging to compare minor variations among pies. For example, when pie slices are near in size, it could be difficult to distinguish minute differences between the many types of pie.\nThe dot plot, on the other hand, offers precise horizontal positioning that makes state-to-state comparisons simpler. Precise numerical values on the x-axis allow you to easily understand how one pie compares to another. Additionally, it prevents the visual distortions that multiple categories might cause in pie charts. For instance, you may more clearly see search trends in the dot plot for pies that might be less noticeable in a pie chart, such as key lime pie in Florida or cherry pie in Wisconsin. Therefore, comparing pie popularity across states can be done more precisely and clearly with the use of the dot plot."
  },
  {
    "objectID": "about.html#dot-plot",
    "href": "about.html#dot-plot",
    "title": "Googled Pies",
    "section": "Dot Plot",
    "text": "Dot Plot\nUsing lattice package, Let’s plot above data:\n\noneColumn = dotplot(mat, groups = FALSE,\n                    layout = c(5, 5), aspect = 0.7,\n                    origin = 0,type = c(\"p\",\"h\"),\n                    main = \"Pies Americans Googled for in the last five years\",\n                    scales = list(x = list(tck = 0, alternating = FALSE)),\n                    panel = function(...){\n                      panel.fill(rgb(.9,.9,.9))\n                      panel.grid(h = 0,v = -1,col = \"white\",lwd = 2)\n                      panel.dotplot(col = rgb(0,.5,1),cex = 1.1,...)\n                    }\n)\noneColumn\n\n\n\n\n\n\n\n\nThe above graph represents the given data in Dot Plot form."
  },
  {
    "objectID": "about.html#scatter-plot",
    "href": "about.html#scatter-plot",
    "title": "Googled Pies",
    "section": "Scatter Plot",
    "text": "Scatter Plot\nConverting Matrix to Dataframe\n\nmat_df &lt;- as.data.frame(mat)\nmat_df$City &lt;- rownames(mat_df)\n\nTransform to long format\n\nmat_long &lt;- pivot_longer(mat_df, cols = -City, names_to = \"Type\", values_to = \"Count\")\n\nCreating Scatter Plot\n\nggplot(mat_long, aes(x = City, y = Count, color = Type)) +\n  geom_point(size = 3) +\n  labs(title = \"Searches for Pies by City\",\n       x = \"Type of Pie\",\n       y = \"Number of Searches\",\n       color = \"City\") +\n  theme_minimal(base_size = 15) + \n  theme(plot.title = element_text(hjust = 0.5)) + \n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\nThe above graph represents the given data in Scatter Plot form."
  },
  {
    "objectID": "Case2.html",
    "href": "Case2.html",
    "title": "Crimes in London",
    "section": "",
    "text": "For this case Let’s Consider the below data Visualization of “Categories of Crime in London boroughs”\nSource : https://sharkcoder.com/data-visualization/mpl-pie-charts\nDonut charts depicting the distribution of crimes in nine London boroughs—Barnet, Bexley, Brent, Bromley, Camden, City of London, and Croydon—are displayed in the image. With colors indicated in the legend, each chart is divided into seven crime categories: robbery, theft and handling, drugs, burglary, criminal damage, robbery, and violence against the person. Theft and Handling and Violence Against the Person are the most noticeable categories in many boroughs; they are shown in red and light red, respectively. There is a noticeable difference in crime rates between the City of London and boroughs such as Barnet, Brent, and Croydon. Notable parts for burglary and criminal damage are also displayed in some regions, such as Bexley and Bromley.\nBy this we can produce better graphics or redesigning of the above data in Line plot and Heat Map.\nLoading Libraries\nlibrary(lattice)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\nEnter the data:\nBarking_and_Dagenham &lt;- c(1694, 7160, 5732, 1846, 3696, 2060, 1324)\nBarnet &lt;- c( 3052, 13396, 10492, 3511, 6925, 3660, 2465)\nBexley &lt;- c(1956, 8787, 7170, 2439, 4731, 2534, 1614)\nBrent &lt;- c(2667, 10865, 9014, 2882, 5655, 3642, 2249)\nBromley &lt;- c(2770, 12289, 9646, 3347, 6454, 3225, 2251)\nCamden &lt;- c(2152, 8676, 6705, 2303, 4370, 2652, 1794)\nCity_of_London &lt;- c(50, 254, 214, 48, 85, 69, 34)\nCroydon &lt;- c(3394, 13695, 11127, 3561, 7270, 4143, 2328)\n\ncities &lt;- cbind(Barking_and_Dagenham, Barnet, Bexley, Brent, Bromley, Camden, City_of_London, Croydon)\ncities\n\n     Barking_and_Dagenham Barnet Bexley Brent Bromley Camden City_of_London\n[1,]                 1694   3052   1956  2667    2770   2152             50\n[2,]                 7160  13396   8787 10865   12289   8676            254\n[3,]                 5732  10492   7170  9014    9646   6705            214\n[4,]                 1846   3511   2439  2882    3347   2303             48\n[5,]                 3696   6925   4731  5655    6454   4370             85\n[6,]                 2060   3660   2534  3642    3225   2652             69\n[7,]                 1324   2465   1614  2249    2251   1794             34\n     Croydon\n[1,]    3394\n[2,]   13695\n[3,]   11127\n[4,]    3561\n[5,]    7270\n[6,]    4143\n[7,]    2328\nAdd row and coloumn labels:\ncrime &lt;- c( \"Robbery\", \"Theft and Handling\",\n           \"Violence against person\", \"Burglary\", \"Criminal Damage\", \"Drugs\", \"Other Offences\")\ncity &lt;- c(\"Barking_and_Dagenham\", \"Barnet\", \"Bexley\", \"Brent\", \"Bromley\", \"Camden\", \"City_of_London\", \"Croydon\")\n\ncolnames(cities) &lt;- city\nrownames(cities) &lt;- crime\ncities\n\n                        Barking_and_Dagenham Barnet Bexley Brent Bromley Camden\nRobbery                                 1694   3052   1956  2667    2770   2152\nTheft and Handling                      7160  13396   8787 10865   12289   8676\nViolence against person                 5732  10492   7170  9014    9646   6705\nBurglary                                1846   3511   2439  2882    3347   2303\nCriminal Damage                         3696   6925   4731  5655    6454   4370\nDrugs                                   2060   3660   2534  3642    3225   2652\nOther Offences                          1324   2465   1614  2249    2251   1794\n                        City_of_London Croydon\nRobbery                             50    3394\nTheft and Handling                 254   13695\nViolence against person            214   11127\nBurglary                            48    3561\nCriminal Damage                     85    7270\nDrugs                               69    4143\nOther Offences                      34    2328\nIt is now in matrix form where Coloumns are City Names and Rows are Type of Crimes.\nArranging data in descending Order by taking mean.\ntypeMeans &lt;- rowMeans(cities)\n(typeOrd &lt;- order(-typeMeans))\n\n[1] 2 3 5 6 4 1 7\n\ncbind(cities,typeMeans)[typeOrd,]\n\n                        Barking_and_Dagenham Barnet Bexley Brent Bromley Camden\nTheft and Handling                      7160  13396   8787 10865   12289   8676\nViolence against person                 5732  10492   7170  9014    9646   6705\nCriminal Damage                         3696   6925   4731  5655    6454   4370\nDrugs                                   2060   3660   2534  3642    3225   2652\nBurglary                                1846   3511   2439  2882    3347   2303\nRobbery                                 1694   3052   1956  2667    2770   2152\nOther Offences                          1324   2465   1614  2249    2251   1794\n                        City_of_London Croydon typeMeans\nTheft and Handling                 254   13695  9390.250\nViolence against person            214   11127  7512.500\nCriminal Damage                     85    7270  4898.250\nDrugs                               69    4143  2748.125\nBurglary                            48    3561  2492.125\nRobbery                             50    3394  2216.875\nOther Offences                      34    2328  1757.375\nConverting Matrix into dataframe;\nLondon_crimes &lt;- as.data.frame(cities) \nLondon_crimes\n\n                        Barking_and_Dagenham Barnet Bexley Brent Bromley Camden\nRobbery                                 1694   3052   1956  2667    2770   2152\nTheft and Handling                      7160  13396   8787 10865   12289   8676\nViolence against person                 5732  10492   7170  9014    9646   6705\nBurglary                                1846   3511   2439  2882    3347   2303\nCriminal Damage                         3696   6925   4731  5655    6454   4370\nDrugs                                   2060   3660   2534  3642    3225   2652\nOther Offences                          1324   2465   1614  2249    2251   1794\n                        City_of_London Croydon\nRobbery                             50    3394\nTheft and Handling                 254   13695\nViolence against person            214   11127\nBurglary                            48    3561\nCriminal Damage                     85    7270\nDrugs                               69    4143\nOther Offences                      34    2328\nAdding new Coloumns of rownames;\ntypes = rownames(London_crimes)\nLondon_crimes$Types = factor(types, ordered = T, levels = rev(types) )\nLondon_crimes\n\n                        Barking_and_Dagenham Barnet Bexley Brent Bromley Camden\nRobbery                                 1694   3052   1956  2667    2770   2152\nTheft and Handling                      7160  13396   8787 10865   12289   8676\nViolence against person                 5732  10492   7170  9014    9646   6705\nBurglary                                1846   3511   2439  2882    3347   2303\nCriminal Damage                         3696   6925   4731  5655    6454   4370\nDrugs                                   2060   3660   2534  3642    3225   2652\nOther Offences                          1324   2465   1614  2249    2251   1794\n                        City_of_London Croydon                   Types\nRobbery                             50    3394                 Robbery\nTheft and Handling                 254   13695      Theft and Handling\nViolence against person            214   11127 Violence against person\nBurglary                            48    3561                Burglary\nCriminal Damage                     85    7270         Criminal Damage\nDrugs                               69    4143                   Drugs\nOther Offences                      34    2328          Other Offences\n\nrownames(London_crimes) = NULL\nLondon_crimes\n\n  Barking_and_Dagenham Barnet Bexley Brent Bromley Camden City_of_London\n1                 1694   3052   1956  2667    2770   2152             50\n2                 7160  13396   8787 10865   12289   8676            254\n3                 5732  10492   7170  9014    9646   6705            214\n4                 1846   3511   2439  2882    3347   2303             48\n5                 3696   6925   4731  5655    6454   4370             85\n6                 2060   3660   2534  3642    3225   2652             69\n7                 1324   2465   1614  2249    2251   1794             34\n  Croydon                   Types\n1    3394                 Robbery\n2   13695      Theft and Handling\n3   11127 Violence against person\n4    3561                Burglary\n5    7270         Criminal Damage\n6    4143                   Drugs\n7    2328          Other Offences\nNow make an indexed data.frame that stacks the race column values\nLondon_crimesType &lt;- gather(London_crimes, key = city, value = count,Barking_and_Dagenham:Croydon,\n                      factor_key = T)\nLondon_crimesType\n\n                     Types                 city count\n1                  Robbery Barking_and_Dagenham  1694\n2       Theft and Handling Barking_and_Dagenham  7160\n3  Violence against person Barking_and_Dagenham  5732\n4                 Burglary Barking_and_Dagenham  1846\n5          Criminal Damage Barking_and_Dagenham  3696\n6                    Drugs Barking_and_Dagenham  2060\n7           Other Offences Barking_and_Dagenham  1324\n8                  Robbery               Barnet  3052\n9       Theft and Handling               Barnet 13396\n10 Violence against person               Barnet 10492\n11                Burglary               Barnet  3511\n12         Criminal Damage               Barnet  6925\n13                   Drugs               Barnet  3660\n14          Other Offences               Barnet  2465\n15                 Robbery               Bexley  1956\n16      Theft and Handling               Bexley  8787\n17 Violence against person               Bexley  7170\n18                Burglary               Bexley  2439\n19         Criminal Damage               Bexley  4731\n20                   Drugs               Bexley  2534\n21          Other Offences               Bexley  1614\n22                 Robbery                Brent  2667\n23      Theft and Handling                Brent 10865\n24 Violence against person                Brent  9014\n25                Burglary                Brent  2882\n26         Criminal Damage                Brent  5655\n27                   Drugs                Brent  3642\n28          Other Offences                Brent  2249\n29                 Robbery              Bromley  2770\n30      Theft and Handling              Bromley 12289\n31 Violence against person              Bromley  9646\n32                Burglary              Bromley  3347\n33         Criminal Damage              Bromley  6454\n34                   Drugs              Bromley  3225\n35          Other Offences              Bromley  2251\n36                 Robbery               Camden  2152\n37      Theft and Handling               Camden  8676\n38 Violence against person               Camden  6705\n39                Burglary               Camden  2303\n40         Criminal Damage               Camden  4370\n41                   Drugs               Camden  2652\n42          Other Offences               Camden  1794\n43                 Robbery       City_of_London    50\n44      Theft and Handling       City_of_London   254\n45 Violence against person       City_of_London   214\n46                Burglary       City_of_London    48\n47         Criminal Damage       City_of_London    85\n48                   Drugs       City_of_London    69\n49          Other Offences       City_of_London    34\n50                 Robbery              Croydon  3394\n51      Theft and Handling              Croydon 13695\n52 Violence against person              Croydon 11127\n53                Burglary              Croydon  3561\n54         Criminal Damage              Croydon  7270\n55                   Drugs              Croydon  4143\n56          Other Offences              Croydon  2328"
  },
  {
    "objectID": "Case2.html#line-plot",
    "href": "Case2.html#line-plot",
    "title": "Crimes in London",
    "section": "Line Plot",
    "text": "Line Plot\nUsing lattice package, Let’s plot above data:\n\nggplot(London_crimesType, aes(x= count,y=Types,fill = city,group = city)) +\n  geom_point(shape = 21, size = 2.8) + \n  geom_line(aes(color = city)) +\n  labs(x = \"Count\",y=\"\",title = \"Categories of Crime in London boroughs\")+\n  facet_wrap(~city)+ scale_x_continuous(breaks=seq(0,14000,by=1000))\n\n\n\n\n\n\n\n\nThe above data is represented in the form of Line Graph"
  },
  {
    "objectID": "Case2.html#heat-map",
    "href": "Case2.html#heat-map",
    "title": "Crimes in London",
    "section": "Heat Map",
    "text": "Heat Map\nCreating Heat map\n\nggplot(London_crimesType, aes(x = city, y = Types, fill = count)) +\n  geom_tile(color = \"white\") +\n  scale_fill_gradient(low = \"yellow\", high = \"red\") + \n  labs(x = \"London Boroughs\", y = \"Crime Types\", title = \"Crime Categories Across London Boroughs\") +\n  theme_minimal() + theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\nThe above graph represents the given data in Heat Map form."
  },
  {
    "objectID": "Codes.html",
    "href": "Codes.html",
    "title": "Codes",
    "section": "",
    "text": "The code for Case 1 is given below:\n\nlibrary(lattice)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nhw &lt;- theme_gray()+ theme(\n  plot.title=element_text(hjust=0.5),\n  plot.subtitle=element_text(hjust=0.5),\n  plot.caption=element_text(hjust=-.5),\n  \n  strip.text.y = element_blank(),\n  strip.background=element_rect(fill=rgb(.9,.95,1),\n                                colour=gray(.5), linewidth =.2),\n  \n  panel.border=element_rect(fill=FALSE,colour=gray(.70)),\n  panel.grid.minor.y = element_blank(),\n  panel.grid.minor.x = element_blank(),\n  panel.spacing.x = unit(0.10,\"cm\"),\n  panel.spacing.y = unit(0.05,\"cm\"),\n  \n  # axis.ticks.y= element_blank()\n  axis.ticks=element_blank(),\n  axis.text=element_text(colour=\"black\"),\n  axis.text.y=element_text(margin=margin(0,3,0,3)),\n  axis.text.x=element_text(margin=margin(-1,0,3,0))\n)\n\nMassachusetts &lt;- c(52,25,10,7,6)\nNewYork &lt;- c(49,27,10,7,7)\nDC &lt;- c(45,28,12,8,7)\nWisconsin &lt;- c(43,28,10,5,14)\nCalifornia &lt;- c(41,33,11,6,9)\nHawaii &lt;- c(39,37,10,7,7)\nColarado &lt;- c(34,36,13,6,11)\nFlorida &lt;- c(33,25,13,22,7)\nTexas &lt;- c(32,25,26,7,10)\nMississippi &lt;- c(32,16,37,7,8)\n\nmat &lt;- cbind(Massachusetts,NewYork,DC,Wisconsin,California,Hawaii,Colarado,Florida,Texas,Mississippi)\nmat\n\n     Massachusetts NewYork DC Wisconsin California Hawaii Colarado Florida\n[1,]            52      49 45        43         41     39       34      33\n[2,]            25      27 28        28         33     37       36      25\n[3,]            10      10 12        10         11     10       13      13\n[4,]             7       7  8         5          6      7        6      22\n[5,]             6       7  7        14          9      7       11       7\n     Texas Mississippi\n[1,]    32          32\n[2,]    25          16\n[3,]    26          37\n[4,]     7           7\n[5,]    10           8\n\ntype &lt;- c(\"Apple Pie\", \"Pumpkin Pie\", \"Pecan Pie\", \"Key Lime Pie\", \"Cherry Pie\")\nCity &lt;- c(\"Massachusetts\", \"NewYork\",\"DC\",\"Wisconsin\",\"California\",\"Hawaii\",\"Colarado\",\"Florida\",\"Texas\",\"Mississippi\")\n\n\ncolnames(mat) &lt;- City\nrownames(mat) &lt;- type \nmat\n\n             Massachusetts NewYork DC Wisconsin California Hawaii Colarado\nApple Pie               52      49 45        43         41     39       34\nPumpkin Pie             25      27 28        28         33     37       36\nPecan Pie               10      10 12        10         11     10       13\nKey Lime Pie             7       7  8         5          6      7        6\nCherry Pie               6       7  7        14          9      7       11\n             Florida Texas Mississippi\nApple Pie         33    32          32\nPumpkin Pie       25    25          16\nPecan Pie         13    26          37\nKey Lime Pie      22     7           7\nCherry Pie         7    10           8\n\noneColumn = dotplot(mat, groups = FALSE,\n                    layout = c(5, 5), aspect = 0.7,\n                    origin = 0,type = c(\"p\",\"h\"),\n                    main = \"Pies Americans Googled for in the last five years\",\n                    scales = list(x = list(tck = 0, alternating = FALSE)),\n                    panel = function(...){\n                      panel.fill(rgb(.9,.9,.9))\n                      panel.grid(h = 0,v = -1,col = \"white\",lwd = 2)\n                      panel.dotplot(col = rgb(0,.5,1),cex = 1.1,...)\n                    }\n)\noneColumn\n\n\n\n\n\n\n\nmat_df &lt;- as.data.frame(mat)\nmat_df$City &lt;- rownames(mat_df)\n\n# Transform to long format\nmat_long &lt;- pivot_longer(mat_df, cols = -City, names_to = \"Type\", values_to = \"Count\")\n\n# Create the scatter plot\nscatter_plot &lt;- ggplot(mat_long, aes(x = City, y = Count, color = Type)) +\n  geom_point(size = 3) +  # Scatter points\n  labs(title = \"Searches for Pies by City\",\n       x = \"Type of Pie\",\n       y = \"Number of Searches\",\n       color = \"City\") +\n  theme_minimal(base_size = 15) + \n  theme(plot.title = element_text(hjust = 0.5)) +  # Center title\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Angle x-axis text for readability\n\n# Display the plot\nprint(scatter_plot)\n\n\n\n\n\n\n\n# Create the scatter plot\nscatter_plot &lt;- ggplot(mat_long, aes(x = Type, y = Count, color = City)) +\n  geom_point(size = 3) +  # Scatter points\n  labs(title = \"Searches for Pies by City\",\n       x = \"Type of Pie\",\n       y = \"Number of Searches\",\n       color = \"City\") +\n  theme_minimal(base_size = 15) + \n  theme(plot.title = element_text(hjust = 0.5)) +  # Center title\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Angle x-axis text for readability\n\n# Display the plot\nprint(scatter_plot)\n\n\n\n\n\n\n\n\nThe Code for Case 2 is given below:\n\nlibrary(lattice)\nlibrary(tidyverse)\n\nBarking_and_Dagenham &lt;- c(1694, 7160, 5732, 1846, 3696, 2060, 1324)\nBarnet &lt;- c( 3052, 13396, 10492, 3511, 6925, 3660, 2465)\nBexley &lt;- c(1956, 8787, 7170, 2439, 4731, 2534, 1614)\nBrent &lt;- c(2667, 10865, 9014, 2882, 5655, 3642, 2249)\nBromley &lt;- c(2770, 12289, 9646, 3347, 6454, 3225, 2251)\nCamden &lt;- c(2152, 8676, 6705, 2303, 4370, 2652, 1794)\nCity_of_London &lt;- c(50, 254, 214, 48, 85, 69, 34)\nCroydon &lt;- c(3394, 13695, 11127, 3561, 7270, 4143, 2328)\n\ncities &lt;- cbind(Barking_and_Dagenham, Barnet, Bexley, Brent, Bromley, Camden, City_of_London, Croydon)\ncities\n\n     Barking_and_Dagenham Barnet Bexley Brent Bromley Camden City_of_London\n[1,]                 1694   3052   1956  2667    2770   2152             50\n[2,]                 7160  13396   8787 10865   12289   8676            254\n[3,]                 5732  10492   7170  9014    9646   6705            214\n[4,]                 1846   3511   2439  2882    3347   2303             48\n[5,]                 3696   6925   4731  5655    6454   4370             85\n[6,]                 2060   3660   2534  3642    3225   2652             69\n[7,]                 1324   2465   1614  2249    2251   1794             34\n     Croydon\n[1,]    3394\n[2,]   13695\n[3,]   11127\n[4,]    3561\n[5,]    7270\n[6,]    4143\n[7,]    2328\n\ncrime &lt;- c( \"Robbery\", \"Theft and Handling\",\n           \"Violence against person\", \"Burglary\", \"Criminal Damage\", \"Drugs\", \"Other Offences\")\ncity &lt;- c(\"Barking_and_Dagenham\", \"Barnet\", \"Bexley\", \"Brent\", \"Bromley\", \"Camden\", \"City_of_London\", \"Croydon\")\n\ncolnames(cities) &lt;- city\nrownames(cities) &lt;- crime\ncities\n\n                        Barking_and_Dagenham Barnet Bexley Brent Bromley Camden\nRobbery                                 1694   3052   1956  2667    2770   2152\nTheft and Handling                      7160  13396   8787 10865   12289   8676\nViolence against person                 5732  10492   7170  9014    9646   6705\nBurglary                                1846   3511   2439  2882    3347   2303\nCriminal Damage                         3696   6925   4731  5655    6454   4370\nDrugs                                   2060   3660   2534  3642    3225   2652\nOther Offences                          1324   2465   1614  2249    2251   1794\n                        City_of_London Croydon\nRobbery                             50    3394\nTheft and Handling                 254   13695\nViolence against person            214   11127\nBurglary                            48    3561\nCriminal Damage                     85    7270\nDrugs                               69    4143\nOther Offences                      34    2328\n\ntypeMeans &lt;- rowMeans(cities)\ntypeMeans\n\n                Robbery      Theft and Handling Violence against person \n               2216.875                9390.250                7512.500 \n               Burglary         Criminal Damage                   Drugs \n               2492.125                4898.250                2748.125 \n         Other Offences \n               1757.375 \n\n(typeOrd &lt;- order(-typeMeans)) # in descending order\n\n[1] 2 3 5 6 4 1 7\n\ncbind(cities,typeMeans)[typeOrd,]\n\n                        Barking_and_Dagenham Barnet Bexley Brent Bromley Camden\nTheft and Handling                      7160  13396   8787 10865   12289   8676\nViolence against person                 5732  10492   7170  9014    9646   6705\nCriminal Damage                         3696   6925   4731  5655    6454   4370\nDrugs                                   2060   3660   2534  3642    3225   2652\nBurglary                                1846   3511   2439  2882    3347   2303\nRobbery                                 1694   3052   1956  2667    2770   2152\nOther Offences                          1324   2465   1614  2249    2251   1794\n                        City_of_London Croydon typeMeans\nTheft and Handling                 254   13695  9390.250\nViolence against person            214   11127  7512.500\nCriminal Damage                     85    7270  4898.250\nDrugs                               69    4143  2748.125\nBurglary                            48    3561  2492.125\nRobbery                             50    3394  2216.875\nOther Offences                      34    2328  1757.375\n\nLondon_crimes &lt;- as.data.frame(cities) # make a data.frame\nLondon_crimes\n\n                        Barking_and_Dagenham Barnet Bexley Brent Bromley Camden\nRobbery                                 1694   3052   1956  2667    2770   2152\nTheft and Handling                      7160  13396   8787 10865   12289   8676\nViolence against person                 5732  10492   7170  9014    9646   6705\nBurglary                                1846   3511   2439  2882    3347   2303\nCriminal Damage                         3696   6925   4731  5655    6454   4370\nDrugs                                   2060   3660   2534  3642    3225   2652\nOther Offences                          1324   2465   1614  2249    2251   1794\n                        City_of_London Croydon\nRobbery                             50    3394\nTheft and Handling                 254   13695\nViolence against person            214   11127\nBurglary                            48    3561\nCriminal Damage                     85    7270\nDrugs                               69    4143\nOther Offences                      34    2328\n\ntypes = rownames(London_crimes)\nLondon_crimes$Types = factor(types, ordered = T, levels = rev(types) ) #including row labels as a new column and categorize them as a factor\nLondon_crimes\n\n                        Barking_and_Dagenham Barnet Bexley Brent Bromley Camden\nRobbery                                 1694   3052   1956  2667    2770   2152\nTheft and Handling                      7160  13396   8787 10865   12289   8676\nViolence against person                 5732  10492   7170  9014    9646   6705\nBurglary                                1846   3511   2439  2882    3347   2303\nCriminal Damage                         3696   6925   4731  5655    6454   4370\nDrugs                                   2060   3660   2534  3642    3225   2652\nOther Offences                          1324   2465   1614  2249    2251   1794\n                        City_of_London Croydon                   Types\nRobbery                             50    3394                 Robbery\nTheft and Handling                 254   13695      Theft and Handling\nViolence against person            214   11127 Violence against person\nBurglary                            48    3561                Burglary\nCriminal Damage                     85    7270         Criminal Damage\nDrugs                               69    4143                   Drugs\nOther Offences                      34    2328          Other Offences\n\nrownames(London_crimes) = NULL # removing row names from the data set (Optional)\nLondon_crimes\n\n  Barking_and_Dagenham Barnet Bexley Brent Bromley Camden City_of_London\n1                 1694   3052   1956  2667    2770   2152             50\n2                 7160  13396   8787 10865   12289   8676            254\n3                 5732  10492   7170  9014    9646   6705            214\n4                 1846   3511   2439  2882    3347   2303             48\n5                 3696   6925   4731  5655    6454   4370             85\n6                 2060   3660   2534  3642    3225   2652             69\n7                 1324   2465   1614  2249    2251   1794             34\n  Croydon                   Types\n1    3394                 Robbery\n2   13695      Theft and Handling\n3   11127 Violence against person\n4    3561                Burglary\n5    7270         Criminal Damage\n6    4143                   Drugs\n7    2328          Other Offences\n\nLondon_crimesType &lt;- gather(London_crimes, key = city, value = count,Barking_and_Dagenham:Croydon,                      factor_key = T)\n\nLondon_crimesType\n\n                     Types                 city count\n1                  Robbery Barking_and_Dagenham  1694\n2       Theft and Handling Barking_and_Dagenham  7160\n3  Violence against person Barking_and_Dagenham  5732\n4                 Burglary Barking_and_Dagenham  1846\n5          Criminal Damage Barking_and_Dagenham  3696\n6                    Drugs Barking_and_Dagenham  2060\n7           Other Offences Barking_and_Dagenham  1324\n8                  Robbery               Barnet  3052\n9       Theft and Handling               Barnet 13396\n10 Violence against person               Barnet 10492\n11                Burglary               Barnet  3511\n12         Criminal Damage               Barnet  6925\n13                   Drugs               Barnet  3660\n14          Other Offences               Barnet  2465\n15                 Robbery               Bexley  1956\n16      Theft and Handling               Bexley  8787\n17 Violence against person               Bexley  7170\n18                Burglary               Bexley  2439\n19         Criminal Damage               Bexley  4731\n20                   Drugs               Bexley  2534\n21          Other Offences               Bexley  1614\n22                 Robbery                Brent  2667\n23      Theft and Handling                Brent 10865\n24 Violence against person                Brent  9014\n25                Burglary                Brent  2882\n26         Criminal Damage                Brent  5655\n27                   Drugs                Brent  3642\n28          Other Offences                Brent  2249\n29                 Robbery              Bromley  2770\n30      Theft and Handling              Bromley 12289\n31 Violence against person              Bromley  9646\n32                Burglary              Bromley  3347\n33         Criminal Damage              Bromley  6454\n34                   Drugs              Bromley  3225\n35          Other Offences              Bromley  2251\n36                 Robbery               Camden  2152\n37      Theft and Handling               Camden  8676\n38 Violence against person               Camden  6705\n39                Burglary               Camden  2303\n40         Criminal Damage               Camden  4370\n41                   Drugs               Camden  2652\n42          Other Offences               Camden  1794\n43                 Robbery       City_of_London    50\n44      Theft and Handling       City_of_London   254\n45 Violence against person       City_of_London   214\n46                Burglary       City_of_London    48\n47         Criminal Damage       City_of_London    85\n48                   Drugs       City_of_London    69\n49          Other Offences       City_of_London    34\n50                 Robbery              Croydon  3394\n51      Theft and Handling              Croydon 13695\n52 Violence against person              Croydon 11127\n53                Burglary              Croydon  3561\n54         Criminal Damage              Croydon  7270\n55                   Drugs              Croydon  4143\n56          Other Offences              Croydon  2328\n\nggplot(London_crimesType, aes(x= count,y=Types,fill = city,group = city)) +\n  geom_point(shape = 21, size = 2.8) + \n  geom_line(aes(color = city)) +\n  labs(x = \"Count\",y=\"\",title = \"Categories of Crime in London boroughs\")+\n  facet_wrap(~city)+ scale_x_continuous(breaks=seq(0,14000,by=1000))\n\n\n\n\n\n\n\nggplot(London_crimesType, aes(x = city, y = Types, fill = count)) +\n  geom_tile(color = \"white\") +\n  scale_fill_gradient(low = \"yellow\", high = \"red\") + # Adjust colors as needed\n  labs(x = \"London Boroughs\", y = \"Crime Types\", title = \"Crime Categories Across London Boroughs\") +\n  theme_minimal() + theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "About Us",
    "section": "",
    "text": "Rithvik Madhavaram\n\n\n\n\n\n\n\n\n\nI’m Rithvik Madhavaram, currently pursuing a Master’s in Data Analytics Engineering at George Mason University. I hold a Bachelor’s in Electronics and Communication Engineering from Chaitanya Bharathi Institute of Technology. My skills include Python, C, Java, and Verilog, with experience in data structures and algorithms.\nI have worked on projects such as a face detection system using OpenCV and a Turbo coder for error correction in digital communication. My internships at Hindustan Aeronautics Limited and IBM have provided me with valuable insights into hydraulic systems and artificial intelligence.\nBeyond academics, I enjoy dancing, listening to music, playing cricket, and watching Formula 1. I am passionate about leveraging my skills to contribute to innovative solutions in data analytics.\n\n\nAryan Patel Kolagani\n\n\n\n\n\n\n\n\n\nHi, Welcome to my Professional Website. I am Aryan Patel Kolagani. I am 21 Yrs Old. I am a Student at George Mason University, currently pursuing Masters in Data Analytics Engineering. I am an aspiring Data Engineer. I mainly focuses on Cloud Data Management and Visualization of Data. I have completed my Bachelor’s of Engineering in Electronics and Communication Engineering from Chaitanya Bharathi Institute of Technology, India in 2024.\nMy Hobbies are Photography, Movies, Reading Books and Re-watching Harry Potter.\nFeel free to explore this website.\n\n\n\n Back to top"
  },
  {
    "objectID": "video.html",
    "href": "video.html",
    "title": "Video",
    "section": "",
    "text": "The below video discuss about our STAT 515 Mid Project:\n\n\n\n\n Back to top"
  },
  {
    "objectID": "Home.html",
    "href": "Home.html",
    "title": "Welcome to Our Website",
    "section": "",
    "text": "STAT 515 MID PROJECT\nThis Project is on Redesigning Examples of Visualization obtained from web sources.\nFeel free to explore around.\n\n\n\n Back to top"
  }
]